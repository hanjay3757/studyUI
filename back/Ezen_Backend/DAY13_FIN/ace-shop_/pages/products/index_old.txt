import { useRouter } from 'next/router';
import ProductList from '@/components/products/ProductList';

interface Product {
  id: number;
  name: string;
  price: number;
  image_url: string;
}

interface Props {
  products: Product[];
}

export default function AllProductsPage({ products }: Props) {
  const router = useRouter();
  const { sort = 'latest' } = router.query;

  const handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedSort = e.target.value;
    router.push(`/products?sort=${selectedSort}`);
  };

  return (
    <div style={{ padding: '2rem' }}>
      <h1>🛍️ 전체 상품</h1>

      <div style={{ marginBottom: '1rem' }}>
        <label>
          정렬:
          <select value={sort} onChange={handleSortChange} style={{ marginLeft: 8 }}>
            <option value="latest">최신순</option>
            <option value="price_asc">가격 낮은순</option>
            <option value="price_desc">가격 높은순</option>
          </select>
        </label>
      </div>
         <div style={{ padding: '1rem' }}>
            <ProductList products={products} />
         </div>
      
    </div>
  );
}

export async function getServerSideProps(context: any) {
  const sort = context.query.sort || 'latest';

  let orderBy = 'id DESC'; // 기본: 최신순
  if (sort === 'price_asc') orderBy = 'price ASC';
  if (sort === 'price_desc') orderBy = 'price DESC';

  try {
    let url=`http://localhost:7777/api/products?order=${encodeURIComponent(orderBy)}`;
    const res = await fetch(url);
    console.log(url)
    const products = await res.json();
    // console.log('products: ', products)
    return { props: { products } };
  } catch (err) {
    console.error('상품 불러오기 실패:', err);
    return { props: { products: [] } };
  }
}
