// 📌 Virtual DOM이란?
// 실제 화면(DOM)을 직접 바꾸지 않고,
// 메모리 속 '가상의 화면'을 먼저 바꾼 다음,
// 바뀐 부분만 실제 화면에 적용하는 기술입니다.

// ❓왜 필요한가요?
// - DOM을 직접 바꾸는 작업은 느립니다.
// - 작은 변화에도 전체 레이아웃을 다시 계산(Reflow)하고 다시 그림(Repaint) 작업이 필요해요.
// - 코드가 복잡해지고, 유지보수가 어려워집니다.

// ✅ Virtual DOM은 이렇게 해결해요:
// 1. 상태(state)가 바뀜 (예: 버튼 클릭)
// 2. 새로운 Virtual DOM 트리를 메모리에서 생성
// 3. 이전 Virtual DOM과 비교 (diffing)
// 4. 바뀐 부분만 모아서 실제 DOM에 한 번에 반영 (batch update)

// 💡 장점:
// - 성능 향상: 꼭 필요한 부분만 업데이트하니까 빠름!
// - 개발 간편: 어떤 화면을 보여줄지만 작성하면 됨 (상태 기반 선언형 UI)
// - 여러 플랫폼에 적용 가능 (웹 + 앱)

// 🧠 요약:
// Virtual DOM은 화면 변경을 더 빠르고 쉽게 해주는 기술입니다.
// 진짜 DOM을 바로 바꾸지 않고, 가상 DOM에서 먼저 계산한 뒤,
// 바뀐 부분만 진짜 DOM에 적용합니다.

/**
 * React 실행 과정
 *
 * React 애플리케이션은 다음과 같은 과정을 거쳐 사용자에게 보여집니다.
 *
 * 1. 초기 렌더링 (Initial Render)
 *
 *    - 사용자가 웹사이트에 처음 접속하면, React는 가장 먼저 최상위 컴포넌트(일반적으로 App 컴포넌트)를 렌더링합니다.
 *    - ReactDOM.render() 함수가 호출되면서, React는 모든 컴포넌트를 순회하며 Virtual DOM 트리를 생성합니다.
 *    - 생성된 Virtual DOM 트리는 실제 DOM으로 변환되어 브라우저에 표시됩니다. 이 과정을 "마운팅(Mounting)"이라고 합니다.
 *
 * 2. 상태 변경과 리렌더링 (State Change & Re-rendering)
 *
 *    - 사용자의 상호작용(예: 버튼 클릭, 텍스트 입력)이나 데이터 fetching 등으로 인해 컴포넌트의 상태(State)나 속성(Props)이 변경됩니다.
 *    - 상태가 변경되면, React는 해당 컴포넌트와 그 자식 컴포넌트들을 다시 렌더링하여 새로운 Virtual DOM 트리를 생성합니다.
 *
 * 3. 재조정 (Reconciliation)
 *
 *    - React는 새로 생성된 Virtual DOM 트리와 이전 Virtual DOM 트리를 비교합니다. 이 과정을 "재조정(Reconciliation)"이라고 하며,
 *      이때 "Diffing" 알고리즘이 사용됩니다.
 *    - Diffing 알고리즘은 두 트리의 차이점을 효율적으로 찾아내어, 실제 DOM에 적용해야 할 최소한의 변경 사항을 계산합니다.
 *
 * 4. 커밋 (Commit)
 *
 *    - React는 재조정을 통해 계산된 변경 사항들을 실제 DOM에 한 번에 적용합니다. 이 단계를 "커밋(Commit)"이라고 합니다.
 *    - 이 과정에서 실제 DOM의 구조가 변경되고, 브라우저는 변경된 부분을 다시 그리게 됩니다(Repaint).
 *
 * 5. 언마운팅 (Unmounting)
 *
 *    - 컴포넌트가 더 이상 필요하지 않게 되면(예: 다른 페이지로 이동), 해당 컴포넌트는 DOM에서 제거됩니다.
 *    - 이 과정을 "언마운팅(Unmounting)"이라고 하며, 컴포넌트가 제거되기 전에 componentWillUnmount와 같은 생명주기 메서드가 호출되어
 *      정리 작업을 수행할 수 있습니다.
 *
 * 요약
 *
 * React는 컴포넌트 기반으로 UI를 구성하고, 상태(State)가 변경될 때마다 Virtual DOM을 사용하여
 * 효율적으로 실제 DOM을 업데이트합니다. 이 과정은 개발자가 UI 로직에만 집중할 수 있도록 도와주며,
 * 애플리케이션의 성능과 유지보수성을 높여줍니다.
 */
