/**
 * Virtual DOM (VDOM)
 *
 * Virtual DOM은 실제 DOM(Document Object Model)의 메모리상 가상 표현(복사본)입니다.
 * UI의 이상적인 상태를 메모리에 유지하고, 실제 DOM과 동기화하는 프로그래밍 개념입니다.
 * 주로 React, Vue.js와 같은 자바스크립트 라이브러리/프레임워크에서 UI 성능을 향상시키기 위해 사용됩니다.
 *
 * 왜 Virtual DOM을 사용할까요? (문제점)
 *
 * 전통적인 방식에서는 데이터가 변경될 때마다 실제 DOM을 직접 조작했습니다.
 * 하지만 DOM을 직접 조작하는 것은 비용이 많이 드는 작업입니다.
 *
 * - 느린 속도: DOM 요소에 작은 변화가 생겨도 브라우저는 전체 페이지의 레이아웃을 다시 계산하고(Reflow),
 *   다시 그리는(Repaint) 과정을 거칩니다. 이 과정은 복잡한 애플리케이션에서 매우 느리고 비효율적일 수 있습니다.
 * - 개발의 복잡성: 상태(State)가 변경될 때마다 어떤 DOM 요소를 어떻게 변경해야 할지 개발자가 직접 관리해야 하므로
 *   코드가 복잡해지고 유지보수가 어려워집니다.
 *
 * Virtual DOM은 어떻게 동작하나요? (해결책)
 *
 * Virtual DOM은 이 문제를 다음과 같은 방식으로 해결합니다.
 *
 * 1. 상태 변경: 애플리케이션의 상태(State)가 변경됩니다. (예: 사용자가 버튼을 클릭함)
 * 2. 가상 DOM 트리 생성: 상태가 변경되면, 전체 UI를 기반으로 새로운 Virtual DOM 트리를 메모리에 생성합니다.
 *    이 과정은 실제 DOM을 건드리지 않고 메모리에서만 일어나므로 매우 빠릅니다.
 * 3. 비교 (Diffing): 이전 Virtual DOM 트리와 새로 생성된 Virtual DOM 트리를 비교하여 정확히 어떤 부분이 변경되었는지 찾아냅니다.
 *    이 비교 알고리즘을 "Diffing"이라고 합니다.
 * 4. 일괄 업데이트 (Batch Update): Diffing을 통해 발견된 변경 사항들을 모아서 한 번에 실제 DOM에 적용합니다.
 *    이렇게 하면 불필요한 Reflow와 Repaint를 최소화하고, 가장 효율적인 방식으로 실제 DOM을 업데이트할 수 있습니다.
 *
 * Virtual DOM의 장점
 *
 * - 성능 향상: DOM 조작을 최소화하고 여러 변경 사항을 하나로 묶어(batch) 처리하므로,
 *   특히 동적인 UI를 가진 복잡한 애플리케이션에서 성능이 크게 향상됩니다.
 * - 개발 생산성: 개발자는 상태(State)만 관리하면 됩니다. 상태가 변했을 때 UI가 어떻게 보일지만 선언하면,
 *   Virtual DOM이 알아서 효율적으로 DOM을 업데이트해주므로 개발이 훨씬 간편해집니다.
 * - 플랫폼 독립성: Virtual DOM은 브라우저 기술에 종속되지 않은 순수한 JavaScript 객체입니다.
 *   이 덕분에 React Native와 같은 프레임워크는 같은 로직을 사용하여 웹뿐만 아니라
 *   모바일 앱의 네이티브 UI를 렌더링할 수 있습니다.
 *
 * 요약
 *
 * Virtual DOM은 실제 DOM을 직접 만지는 대신, 메모리상의 가벼운 복사본을 먼저 변경하고,
 * 이전 버전과의 차이점을 계산하여 최종 변경분만 실제 DOM에 한 번에 적용하는 기술입니다.
 * 이를 통해 불필요한 렌더링을 줄여 성능을 높이고 개발을 더 쉽게 만들어 줍니다.
 */

/**
 * React 실행 과정
 *
 * React 애플리케이션은 다음과 같은 과정을 거쳐 사용자에게 보여집니다.
 *
 * 1. 초기 렌더링 (Initial Render)
 *
 *    - 사용자가 웹사이트에 처음 접속하면, React는 가장 먼저 최상위 컴포넌트(일반적으로 App 컴포넌트)를 렌더링합니다.
 *    - ReactDOM.render() 함수가 호출되면서, React는 모든 컴포넌트를 순회하며 Virtual DOM 트리를 생성합니다.
 *    - 생성된 Virtual DOM 트리는 실제 DOM으로 변환되어 브라우저에 표시됩니다. 이 과정을 "마운팅(Mounting)"이라고 합니다.
 *
 * 2. 상태 변경과 리렌더링 (State Change & Re-rendering)
 *
 *    - 사용자의 상호작용(예: 버튼 클릭, 텍스트 입력)이나 데이터 fetching 등으로 인해 컴포넌트의 상태(State)나 속성(Props)이 변경됩니다.
 *    - 상태가 변경되면, React는 해당 컴포넌트와 그 자식 컴포넌트들을 다시 렌더링하여 새로운 Virtual DOM 트리를 생성합니다.
 *
 * 3. 재조정 (Reconciliation)
 *
 *    - React는 새로 생성된 Virtual DOM 트리와 이전 Virtual DOM 트리를 비교합니다. 이 과정을 "재조정(Reconciliation)"이라고 하며,
 *      이때 "Diffing" 알고리즘이 사용됩니다.
 *    - Diffing 알고리즘은 두 트리의 차이점을 효율적으로 찾아내어, 실제 DOM에 적용해야 할 최소한의 변경 사항을 계산합니다.
 *
 * 4. 커밋 (Commit)
 *
 *    - React는 재조정을 통해 계산된 변경 사항들을 실제 DOM에 한 번에 적용합니다. 이 단계를 "커밋(Commit)"이라고 합니다.
 *    - 이 과정에서 실제 DOM의 구조가 변경되고, 브라우저는 변경된 부분을 다시 그리게 됩니다(Repaint).
 *
 * 5. 언마운팅 (Unmounting)
 *
 *    - 컴포넌트가 더 이상 필요하지 않게 되면(예: 다른 페이지로 이동), 해당 컴포넌트는 DOM에서 제거됩니다.
 *    - 이 과정을 "언마운팅(Unmounting)"이라고 하며, 컴포넌트가 제거되기 전에 componentWillUnmount와 같은 생명주기 메서드가 호출되어
 *      정리 작업을 수행할 수 있습니다.
 *
 * 요약
 *
 * React는 컴포넌트 기반으로 UI를 구성하고, 상태(State)가 변경될 때마다 Virtual DOM을 사용하여
 * 효율적으로 실제 DOM을 업데이트합니다. 이 과정은 개발자가 UI 로직에만 집중할 수 있도록 도와주며,
 * 애플리케이션의 성능과 유지보수성을 높여줍니다.
 */
